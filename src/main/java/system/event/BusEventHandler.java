package main.java.system.event;

import main.java.entities.transit.BusStop;
import main.java.entities.transit.TransitLine;
import main.java.entities.transit.TransitStop;
import main.java.system.Logger;
import main.java.system.Trip;

import java.util.ArrayList;

/**
 * A TapEventHandler responsible for processing tap events generated by a user
 * tapping into or out of a bus
 */
public class BusEventHandler extends TapEventHandler {
    /**
     * Construct a new BusEventHandler to process the given tap at a bus stop
     * 
     * @param tap the event to process
     */
    public BusEventHandler(Event tap) {
        super(tap);
    }

    /**
     * Helper method to handle the case where the user is entering a bus
     * 
     * @return the trip that this event has been inserted into, may be null if the
     *         user will not be charged for this event
     */
    private Trip handleEnter() {
        Trip currTrip = tripsOnCard.get(numTrips - 1);
        Event prevEvt = currTrip.getLatestEvent();
        TransitStop prevLoc = prevEvt.getLocation();
        tap.setDirection("enter");
        if (currTrip.getStartTime().isBefore(tap.getTimeStamp().minusHours(2))) {
            // this trip was started more than 2hrs ago
            currTrip = card.startTrip(tap);
        } else {
            if (prevLoc.canTransferTo(tap.getLocation())) {
                currTrip.addEvent(tap);
            } else {
                currTrip = card.startTrip(tap);
            }
        }
        return currTrip;
    }

    /**
     * Helper to handle the case where the event is a user tapping out of a bus.
     * Returns the trip associated with the event so that the user may be charged
     * 
     * @return the trip that this event has been inserted into, may be null if the
     *         user will not be charged for this event
     */
    private Trip handleExit() {
        Trip currTrip = tripsOnCard.get(numTrips - 1);
        Event prevEvt = currTrip.getLatestEvent();
        TransitStop prevLoc = prevEvt.getLocation();
        TransitStop loc = tap.getLocation();
        TransitLine currLine = loc.getLine();

        tap.setDirection("exit");
        currTrip.addEvent(tap);

        return currTrip;
    }

    /**
     * Applies logic to handle a tap event on a bus. Returns the trip which will be
     * used to charge the user for this event.
     * 
     * @return the trip that will be used to calculate the fare for this event. Is
     *         null if the user will not be charged
     */
    @Override
    public Trip handleTap() {
        ArrayList<Trip> tripsOnCard = card.getTrips();
        int numTrips = tripsOnCard.size();
        Trip currTrip;

        if (numTrips == 0) {
            tap.setDirection("enter");
            currTrip = card.startTrip(tap);
        } else {
            currTrip = tripsOnCard.get(numTrips - 1);
            Event prevEvt = currTrip.getLatestEvent();
            TransitStop prevLoc = prevEvt.getLocation();
            TransitStop loc = tap.getLocation();
            TransitLine currLine = loc.getLine();

            if (prevEvt.isEntering() && prevLoc.getClass() == BusStop.class && prevLoc.getLine() == currLine) {
                currTrip = handleExit();
            } else {
                currTrip = handleEnter();
            }
        }
        Logger.event(tap);
        return currTrip;
    }
}
