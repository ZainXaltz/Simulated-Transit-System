package main.java.system.event;

import main.java.entities.transit.TransitStop;
import main.java.system.Logger;
import main.java.system.Trip;

/**
 * A TapEventHandler responsible for processing tap events generated by a user
 * tapping into or out of a subway
 */
public class SubwayEventHandler extends TapEventHandler {
    /**
     * Construct a new SubwayEventHandler to process the given tap at a subway
     * station
     * 
     * @param tap the event to process
     */
    public SubwayEventHandler(Event tap) {
        super(tap);
    }

    /**
     * Helper method to handle the case where the user is entering the subway
     */
    private void handleEnter() {
        Trip currentTrip;
        if (numTrips == 0) {
            card.startTrip(tap);
        } else {
            currentTrip = tripsOnCard.get(numTrips - 1);
            if (currentTrip.getStartTime().isBefore(tap.getTimeStamp().minusHours(2))) {
                // this trip was started more than 2hrs ago
                card.startTrip(tap);
            } else {
                TransitStop prevLoc = currentTrip.getLatestEvent().getLocation();
                if (prevLoc.canTransferTo(tap.getLocation())) {
                    currentTrip.addEvent(tap);
                } else {
                    card.startTrip(tap);
                }
            }
        }
    }

    /**
     * Helper to handle the case where the event is a user tapping out of a subway.
     * Returns the trip associated with the event so that the user may be charged
     * 
     * @return the trip that this event has been inserted into, may be null if the
     *         user will not be charged for this event
     */
    private Trip handleExit() {
        Trip currentTrip;
        if (numTrips == 0) {
            // the user is trying to tap out but there was no tap in
            Logger.error("It appears as though you did not use this card to tap into the subway.",
                    "Try another card or contact a transit employee for help.");
            currentTrip = null;
        } else {
            currentTrip = tripsOnCard.get(numTrips - 1);
            TransitStop prev = currentTrip.getLatestEvent().getLocation();
            TransitStop curr = tap.getLocation();
            if (prev.getLine() == curr.getLine() && prev.getLine().getDistTraveled(prev, curr) > 0) {
                // the user has tapped out of a stop on the line where they tapped in
                // and the stop they tapped out of is after the one they tapped in at
                currentTrip.addEvent(tap);
            } else {
                // the user never tapped into an earlier stop on this line
                Logger.error("We're not sure how you got here.", "Please contact a transit employee for assistance.");
                currentTrip = null;
            }
        }
        return currentTrip;
    }

    /**
     * Applies logic to handle a tap event at the subway. Returns the trip which
     * will be used to charge the user for this event.
     * 
     * @return the trip that will be used to calculate the fare for this event. Is
     *         null if the user will not be charged
     */
    @Override
    public Trip handleTap() {
        Logger.event(tap);
        if (tap.isEntering()) {
            handleEnter();
            return null;
        } else {
            return handleExit();
        }
    }
}
